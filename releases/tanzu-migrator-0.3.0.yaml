apiVersion: v1
kind: Namespace
metadata:
  labels:
    app: tanzu-migrator
  name: tanzu-migrator
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
  creationTimestamp: null
  labels:
    app: tanzu-migrator
  name: miganalytics.migrator.run.tanzu.vmware.com
spec:
  additionalPrinterColumns:
  - JSONPath: .status.conditions[?(@.type=='Ready')].status
    name: Ready
    type: string
  - JSONPath: .spec.migPlanRef.name
    name: Plan
    type: string
  - JSONPath: .status.analytics.percentComplete
    name: Progress
    type: string
  - JSONPath: .status.analytics.k8sResourceTotal
    name: Resources
    type: string
  - JSONPath: .status.analytics.imageCount
    name: Images
    type: string
  - JSONPath: .status.analytics.imageSizeTotal
    name: ImageSize
    type: string
  - JSONPath: .status.analytics.pvCount
    name: PVs
    type: string
  - JSONPath: .status.analytics.pvCapacity
    name: PVCapacity
    type: string
  - JSONPath: .metadata.creationTimestamp
    name: Age
    type: date
  group: migrator.run.tanzu.vmware.com
  names:
    kind: MigAnalytic
    listKind: MigAnalyticList
    plural: miganalytics
    singular: miganalytic
  scope: Namespaced
  subresources: {}
  validation:
    openAPIV3Schema:
      description: MigAnalytic is the Schema for the miganalytics API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: MigAnalyticSpec defines the desired state of MigAnalytic
          properties:
            analyzeExtendedPVCapacity:
              description: Enables advanced analysis of volumes required for PV resizing
              type: boolean
            analyzeImageCount:
              description: Enables analysis of image count, if set true. This is a required field.
              type: boolean
            analyzeK8SResources:
              description: Enables analysis of k8s resources, if set true. This is a required field.
              type: boolean
            analyzePVCapacity:
              description: Enables analysis of persistent volume capacity, if set true. This is a required field.
              type: boolean
            listImages:
              description: Enable used in analysis of image count, if set true.
              type: boolean
            listImagesLimit:
              description: Represents limit on image counts
              type: integer
            migPlanRef:
              description: 'ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don''t make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .'
              properties:
                apiVersion:
                  description: API version of the referent.
                  type: string
                fieldPath:
                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                  type: string
                kind:
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                  type: string
                namespace:
                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                  type: string
                resourceVersion:
                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                  type: string
                uid:
                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                  type: string
              type: object
            refresh:
              description: Enables refreshing existing MigAnalytic
              type: boolean
          required:
          - analyzeImageCount
          - analyzeK8SResources
          - analyzePVCapacity
          - migPlanRef
          type: object
        status:
          description: MigAnalyticStatus defines the observed state of MigAnalytic
          properties:
            analytics:
              description: MigAnalyticPlan defines the observed state of MigAnalyticPlan
              properties:
                excludedk8sResourceTotal:
                  type: integer
                imageCount:
                  type: integer
                imageSizeTotal:
                  anyOf:
                  - type: integer
                  - type: string
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                incompatiblek8sResourceTotal:
                  type: integer
                k8sResourceTotal:
                  type: integer
                namespaces:
                  items:
                    description: MigAnalyticNamespace defines the observed state of MigAnalyticNamespace
                    properties:
                      excludedK8SResourceTotal:
                        type: integer
                      excludedK8SResources:
                        items:
                          description: MigAnalyticNamespaceResource defines the observed state of MigAnalyticNamespaceResource
                          properties:
                            count:
                              type: integer
                            group:
                              type: string
                            kind:
                              type: string
                            version:
                              type: string
                          required:
                          - count
                          - group
                          - kind
                          - version
                          type: object
                        type: array
                      imageCount:
                        type: integer
                      imageSizeTotal:
                        anyOf:
                        - type: integer
                        - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      images:
                        items:
                          properties:
                            name:
                              type: string
                            reference:
                              type: string
                            size:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                          required:
                          - name
                          - reference
                          - size
                          type: object
                        type: array
                      incompatibleK8SResourceTotal:
                        type: integer
                      incompatibleK8SResources:
                        items:
                          description: MigAnalyticNamespaceResource defines the observed state of MigAnalyticNamespaceResource
                          properties:
                            count:
                              type: integer
                            group:
                              type: string
                            kind:
                              type: string
                            version:
                              type: string
                          required:
                          - count
                          - group
                          - kind
                          - version
                          type: object
                        type: array
                      k8sResourceTotal:
                        type: integer
                      k8sResources:
                        items:
                          description: MigAnalyticNamespaceResource defines the observed state of MigAnalyticNamespaceResource
                          properties:
                            count:
                              type: integer
                            group:
                              type: string
                            kind:
                              type: string
                            version:
                              type: string
                          required:
                          - count
                          - group
                          - kind
                          - version
                          type: object
                        type: array
                      namespace:
                        type: string
                      persistentVolumes:
                        items:
                          description: MigAnalyticPersistentVolumeClaim represents a Kubernetes Persistent volume claim with discovered analytic properties
                          properties:
                            actualCapacity:
                              anyOf:
                              - type: integer
                              - type: string
                              description: Actual provisioned capacity of the volume
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            comment:
                              description: Human readable reason for proposed adjustment
                              type: string
                            name:
                              description: Name of the persistent volume claim
                              type: string
                            proposedCapacity:
                              anyOf:
                              - type: integer
                              - type: string
                              description: Adjusted capacity of the volume
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            requestedCapacity:
                              anyOf:
                              - type: integer
                              - type: string
                              description: Requested capacity of the claim
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            usagePercentage:
                              description: Usage of volume in percentage
                              type: integer
                          required:
                          - name
                          type: object
                        type: array
                      pvCapacity:
                        anyOf:
                        - type: integer
                        - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      pvCount:
                        type: integer
                    required:
                    - excludedK8SResourceTotal
                    - imageCount
                    - imageSizeTotal
                    - incompatibleK8SResourceTotal
                    - k8sResourceTotal
                    - namespace
                    - pvCapacity
                    - pvCount
                    type: object
                  type: array
                percentComplete:
                  type: integer
                plan:
                  type: string
                pvCapacity:
                  anyOf:
                  - type: integer
                  - type: string
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                pvCount:
                  type: integer
              required:
              - excludedk8sResourceTotal
              - imageCount
              - imageSizeTotal
              - incompatiblek8sResourceTotal
              - k8sResourceTotal
              - percentComplete
              - plan
              - pvCapacity
              - pvCount
              type: object
            conditions:
              items:
                description: Condition Type - The condition type. Status - The condition status. Reason - The reason for the condition. Message - The human readable description of the condition. Durable - The condition is not un-staged. Items - A list of `items` associated with the condition used to replace [] in `Message`. staging - A condition has been explicitly set/updated.
                properties:
                  category:
                    type: string
                  durable:
                    type: boolean
                  lastTransitionTime:
                    format: date-time
                    type: string
                  message:
                    type: string
                  reason:
                    type: string
                  status:
                    type: string
                  type:
                    type: string
                required:
                - category
                - lastTransitionTime
                - status
                - type
                type: object
              type: array
            observedGeneration:
              format: int64
              type: integer
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
  creationTimestamp: null
  labels:
    app: tanzu-migrator
  name: migclusters.migrator.run.tanzu.vmware.com
spec:
  additionalPrinterColumns:
  - JSONPath: .status.conditions[?(@.type=='Ready')].status
    name: Ready
    type: string
  - JSONPath: .spec.url
    name: URL
    type: string
  - JSONPath: .spec.isHostCluster
    name: Host
    type: boolean
  - JSONPath: .metadata.creationTimestamp
    name: Age
    type: date
  group: migrator.run.tanzu.vmware.com
  names:
    kind: MigCluster
    listKind: MigClusterList
    plural: migclusters
    singular: migcluster
  scope: Namespaced
  subresources: {}
  validation:
    openAPIV3Schema:
      description: MigCluster is the Schema for the migclusters API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: MigClusterSpec defines the desired state of MigCluster
          properties:
            azureResourceGroup:
              description: For azure clusters -- it's the resource group that in-cluster volumes use.
              type: string
            caBundle:
              description: If the migcluster needs SSL verification for connections a user can supply a custom CA bundle. This field is required only when spec.Insecure is set false
              format: byte
              type: string
            exposedRegistryPath:
              description: Stores the path of registry route when using direct migration.
              type: string
            insecure:
              description: If set false, user will need to provide CA bundle for TLS connection to the remote cluster.
              type: boolean
            isHostCluster:
              description: Specifies if the cluster is host (where the controller is installed) or not. This is a required field.
              type: boolean
            refresh:
              description: If set True, forces the controller to run a full suite of validations on migcluster.
              type: boolean
            restartRestic:
              description: An override setting to tell the controller that the source cluster restic needs to be restarted after stage pod creation.
              type: boolean
            serviceAccountSecretRef:
              description: 'ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don''t make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .'
              properties:
                apiVersion:
                  description: API version of the referent.
                  type: string
                fieldPath:
                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                  type: string
                kind:
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                  type: string
                namespace:
                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                  type: string
                resourceVersion:
                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                  type: string
                uid:
                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                  type: string
              type: object
            url:
              description: Stores the url of the remote cluster. The field is only required for the source cluster object.
              type: string
            vendor:
              description: 'Identify what is the cluster vendor Valid values are: - "NoVendor" (default): a native K8s cluster; - "OpenShift": a OpenShift cluster; - "TKGI": a TKG integrated cluster; - "TKGS": a TKG service cluster; - "TKGM": a TKG multi-cloud cluster;'
              enum:
              - NoVendor
              - OpenShift
              - TKGI
              - TKGS
              - TKGM
              type: string
            version:
              type: string
          required:
          - isHostCluster
          - vendor
          type: object
        status:
          description: MigClusterStatus defines the observed state of MigCluster
          properties:
            conditions:
              items:
                description: Condition Type - The condition type. Status - The condition status. Reason - The reason for the condition. Message - The human readable description of the condition. Durable - The condition is not un-staged. Items - A list of `items` associated with the condition used to replace [] in `Message`. staging - A condition has been explicitly set/updated.
                properties:
                  category:
                    type: string
                  durable:
                    type: boolean
                  lastTransitionTime:
                    format: date-time
                    type: string
                  message:
                    type: string
                  reason:
                    type: string
                  status:
                    type: string
                  type:
                    type: string
                required:
                - category
                - lastTransitionTime
                - status
                - type
                type: object
              type: array
            observedDigest:
              type: string
            operatorVersion:
              type: string
            registryPath:
              type: string
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
  creationTimestamp: null
  labels:
    app: tanzu-migrator
  name: mighooks.migrator.run.tanzu.vmware.com
spec:
  additionalPrinterColumns:
  - JSONPath: .status.conditions[?(@.type=='Ready')].status
    name: Ready
    type: string
  - JSONPath: .spec.image
    name: Image
    type: string
  - JSONPath: .spec.targetCluster
    name: TargetCluster
    type: string
  - JSONPath: .metadata.creationTimestamp
    name: Age
    type: date
  group: migrator.run.tanzu.vmware.com
  names:
    kind: MigHook
    listKind: MigHookList
    plural: mighooks
    singular: mighook
  scope: Namespaced
  subresources: {}
  validation:
    openAPIV3Schema:
      description: MigHook is the Schema for the mighooks API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: MigHookSpec defines the desired state of MigHook
          properties:
            activeDeadlineSeconds:
              description: Specifies the highest amount of time for which the hook will run.
              format: int64
              type: integer
            custom:
              description: Specifies whether the hook is a custom Ansible playbook or a pre-built image. This is a required field.
              type: boolean
            image:
              description: Specifies the image of the hook to be executed. This is a required field.
              type: string
            playbook:
              description: Specifies the contents of the custom Ansible playbook in base64 format, it is used in conjunction with the custom boolean flag.
              type: string
            targetCluster:
              description: Specifies the cluster on which the hook is to be executed. This is a required field.
              type: string
          required:
          - custom
          - image
          - targetCluster
          type: object
        status:
          description: MigHookStatus defines the observed state of MigHook
          properties:
            conditions:
              items:
                description: Condition Type - The condition type. Status - The condition status. Reason - The reason for the condition. Message - The human readable description of the condition. Durable - The condition is not un-staged. Items - A list of `items` associated with the condition used to replace [] in `Message`. staging - A condition has been explicitly set/updated.
                properties:
                  category:
                    type: string
                  durable:
                    type: boolean
                  lastTransitionTime:
                    format: date-time
                    type: string
                  message:
                    type: string
                  reason:
                    type: string
                  status:
                    type: string
                  type:
                    type: string
                required:
                - category
                - lastTransitionTime
                - status
                - type
                type: object
              type: array
            observedGeneration:
              format: int64
              type: integer
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
  creationTimestamp: null
  labels:
    app: tanzu-migrator
  name: migmigrations.migrator.run.tanzu.vmware.com
spec:
  additionalPrinterColumns:
  - JSONPath: .status.conditions[?(@.type=='Ready')].status
    name: Ready
    type: string
  - JSONPath: .spec.migPlanRef.name
    name: Plan
    type: string
  - JSONPath: .spec.stage
    name: Stage
    type: string
  - JSONPath: .spec.rollback
    name: Rollback
    type: string
  - JSONPath: .status.itinerary
    name: Itinerary
    type: string
  - JSONPath: .status.phase
    name: Phase
    type: string
  - JSONPath: .metadata.creationTimestamp
    name: Age
    type: date
  group: migrator.run.tanzu.vmware.com
  names:
    kind: MigMigration
    listKind: MigMigrationList
    plural: migmigrations
    singular: migmigration
  scope: Namespaced
  subresources: {}
  validation:
    openAPIV3Schema:
      description: MigMigration is the Schema for the migmigrations API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: MigMigrationSpec defines the desired state of MigMigration
          properties:
            canceled:
              description: Invokes the cancel migration operation, when set to true the migration controller switches to cancel itinerary. This field can be used on-demand to cancel the running migration.
              type: boolean
            keepAnnotations:
              description: Specifies whether to retain the annotations set by the migration controller or not.
              type: boolean
            migPlanRef:
              description: 'ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don''t make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .'
              properties:
                apiVersion:
                  description: API version of the referent.
                  type: string
                fieldPath:
                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                  type: string
                kind:
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                  type: string
                namespace:
                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                  type: string
                resourceVersion:
                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                  type: string
                uid:
                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                  type: string
              type: object
            quiescePods:
              description: Specifies whether to quiesce the application Pods before migrating Persistent Volume data.
              type: boolean
            rollback:
              description: Invokes the rollback migration operation, when set to true the migration controller switches to rollback itinerary. This field needs to be set prior to creation of a MigMigration.
              type: boolean
            stage:
              description: Invokes the stage operation, when set to true the migration controller switches to stage itinerary. This is a required field.
              type: boolean
            verify:
              description: Specifies whether to verify the health of the migrated pods or not.
              type: boolean
          required:
          - stage
          type: object
        status:
          description: MigMigrationStatus defines the observed state of MigMigration
          properties:
            conditions:
              items:
                description: Condition Type - The condition type. Status - The condition status. Reason - The reason for the condition. Message - The human readable description of the condition. Durable - The condition is not un-staged. Items - A list of `items` associated with the condition used to replace [] in `Message`. staging - A condition has been explicitly set/updated.
                properties:
                  category:
                    type: string
                  durable:
                    type: boolean
                  lastTransitionTime:
                    format: date-time
                    type: string
                  message:
                    type: string
                  reason:
                    type: string
                  status:
                    type: string
                  type:
                    type: string
                required:
                - category
                - lastTransitionTime
                - status
                - type
                type: object
              type: array
            errors:
              items:
                type: string
              type: array
            itinerary:
              type: string
            namespaces:
              items:
                description: UnhealthyNamespace is a store for unhealthy resources in a namespace
                properties:
                  name:
                    type: string
                  workloads:
                    items:
                      description: Workload is a store for unhealthy resource and it's dependents
                      properties:
                        name:
                          type: string
                        resources:
                          items:
                            type: string
                          type: array
                      required:
                      - name
                      type: object
                    type: array
                required:
                - name
                - workloads
                type: object
              type: array
            observedDigest:
              type: string
            phase:
              type: string
            pipeline:
              items:
                description: Step defines a task in a step of migration
                properties:
                  completed:
                    description: Completed timestamp.
                    format: date-time
                    type: string
                  failed:
                    type: boolean
                  message:
                    type: string
                  name:
                    type: string
                  phase:
                    type: string
                  progress:
                    items:
                      type: string
                    type: array
                  skipped:
                    type: boolean
                  started:
                    description: Started timestamp.
                    format: date-time
                    type: string
                required:
                - name
                type: object
              type: array
            startTimestamp:
              format: date-time
              type: string
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
  creationTimestamp: null
  labels:
    app: tanzu-migrator
  name: migplans.migrator.run.tanzu.vmware.com
spec:
  additionalPrinterColumns:
  - JSONPath: .status.conditions[?(@.type=='Ready')].status
    name: Ready
    type: string
  - JSONPath: .spec.srcMigClusterRef.name
    name: Source
    type: string
  - JSONPath: .spec.destMigClusterRef.name
    name: Target
    type: string
  - JSONPath: .spec.migStorageRef.name
    name: Storage
    type: string
  - JSONPath: .metadata.creationTimestamp
    name: Age
    type: date
  group: migrator.run.tanzu.vmware.com
  names:
    kind: MigPlan
    listKind: MigPlanList
    plural: migplans
    singular: migplan
  scope: Namespaced
  subresources: {}
  validation:
    openAPIV3Schema:
      description: MigPlan is the Schema for the migplans API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: MigPlanSpec defines the desired state of MigPlan
          properties:
            closed:
              description: If the migration was successful for a migplan, this value can be set True indicating that after one successful migration no new migrations can be carried out for this migplan.
              type: boolean
            destMigClusterRef:
              description: 'ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don''t make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .'
              properties:
                apiVersion:
                  description: API version of the referent.
                  type: string
                fieldPath:
                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                  type: string
                kind:
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                  type: string
                namespace:
                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                  type: string
                resourceVersion:
                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                  type: string
                uid:
                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                  type: string
              type: object
            hooks:
              description: Holds a reference to a MigHook along with the desired phase to run it in.
              items:
                description: MigPlanHook hold a reference to a MigHook along with the desired phase to run it in
                properties:
                  executionNamespace:
                    description: Holds the name of the namespace where hooks should be implemented.
                    type: string
                  phase:
                    description: 'Indicates the phase when the hooks will be executed. Acceptable values are: PreBackup, PostBackup, PreRestore, and PostRestore.'
                    type: string
                  reference:
                    description: 'ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don''t make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .'
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                  serviceAccount:
                    description: Holds the name of the service account to be used for running hooks.
                    type: string
                required:
                - executionNamespace
                - phase
                - reference
                - serviceAccount
                type: object
              type: array
            indirectImageMigration:
              description: If set True, disables direct image migrations.
              type: boolean
            indirectVolumeMigration:
              description: If set True, disables direct volume migrations.
              type: boolean
            migStorageRef:
              description: 'ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don''t make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .'
              properties:
                apiVersion:
                  description: API version of the referent.
                  type: string
                fieldPath:
                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                  type: string
                kind:
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                  type: string
                namespace:
                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                  type: string
                resourceVersion:
                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                  type: string
                uid:
                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                  type: string
              type: object
            namespaces:
              description: Holds names of all the namespaces to be included in migration.
              items:
                type: string
              type: array
            persistentVolumes:
              items:
                description: Name - The PV name. Capacity - The PV storage capacity. StorageClass - The PV storage class name. Supported - Lists of what is supported. Selection - Choices made from supported. PVC - Associated PVC. NFS - NFS properties. staged - A PV has been explicitly added/updated.
                properties:
                  capacity:
                    anyOf:
                    - type: integer
                    - type: string
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  capacityConfirmed:
                    type: boolean
                  name:
                    type: string
                  proposedCapacity:
                    anyOf:
                    - type: integer
                    - type: string
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  pvc:
                    description: PVC
                    properties:
                      accessModes:
                        items:
                          type: string
                        type: array
                      hasReference:
                        type: boolean
                      name:
                        type: string
                      namespace:
                        type: string
                    type: object
                  selection:
                    description: Selection Action - The PV migration action (move|copy|skip) StorageClass - The PV storage class name to use in the destination cluster. AccessMode   - The PV access mode to use in the destination cluster, if different from src PVC AccessMode CopyMethod   - The PV copy method to use ('filesystem' for restic copy, or 'snapshot' for velero snapshot plugin) Verify       - Whether or not to verify copied volume data if CopyMethod is 'filesystem'
                    properties:
                      accessMode:
                        type: string
                      action:
                        type: string
                      copyMethod:
                        type: string
                      storageClass:
                        type: string
                      verify:
                        type: boolean
                    type: object
                  storageClass:
                    type: string
                  supported:
                    description: Supported Actions     - The list of supported actions CopyMethods - The list of supported copy methods
                    properties:
                      actions:
                        items:
                          type: string
                        type: array
                      copyMethods:
                        items:
                          type: string
                        type: array
                    required:
                    - actions
                    - copyMethods
                    type: object
                required:
                - selection
                - supported
                type: object
              type: array
            refresh:
              description: If set True, the controller is forced to check if the migplan is in Ready state or not.
              type: boolean
            srcMigClusterRef:
              description: 'ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don''t make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .'
              properties:
                apiVersion:
                  description: API version of the referent.
                  type: string
                fieldPath:
                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                  type: string
                kind:
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                  type: string
                namespace:
                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                  type: string
                resourceVersion:
                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                  type: string
                uid:
                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                  type: string
              type: object
          type: object
        status:
          description: MigPlanStatus defines the observed state of MigPlan
          properties:
            conditions:
              items:
                description: Condition Type - The condition type. Status - The condition status. Reason - The reason for the condition. Message - The human readable description of the condition. Durable - The condition is not un-staged. Items - A list of `items` associated with the condition used to replace [] in `Message`. staging - A condition has been explicitly set/updated.
                properties:
                  category:
                    type: string
                  durable:
                    type: boolean
                  lastTransitionTime:
                    format: date-time
                    type: string
                  message:
                    type: string
                  reason:
                    type: string
                  status:
                    type: string
                  type:
                    type: string
                required:
                - category
                - lastTransitionTime
                - status
                - type
                type: object
              type: array
            destStorageClasses:
              items:
                description: StorageClass is an available storage class in the cluster Name - the storage class name Provisioner - the dynamic provisioner for the storage class Default - whether or not this storage class is the default AccessModes - access modes supported by the dynamic provisioner
                properties:
                  accessModes:
                    items:
                      type: string
                    type: array
                  default:
                    type: boolean
                  name:
                    type: string
                  provisioner:
                    type: string
                type: object
              type: array
            excludedResources:
              items:
                type: string
              type: array
            incompatibleNamespaces:
              items:
                description: IncompatibleNamespace - namespace, which is noticed to contain resources incompatible by the migration
                properties:
                  gvks:
                    items:
                      description: IncompatibleGVK - custom structure for printing GVKs lowercase
                      properties:
                        group:
                          type: string
                        kind:
                          type: string
                        version:
                          type: string
                      required:
                      - group
                      - kind
                      - version
                      type: object
                    type: array
                  name:
                    type: string
                required:
                - gvks
                - name
                type: object
              type: array
            namespaces:
              items:
                description: UnhealthyNamespace is a store for unhealthy resources in a namespace
                properties:
                  name:
                    type: string
                  workloads:
                    items:
                      description: Workload is a store for unhealthy resource and it's dependents
                      properties:
                        name:
                          type: string
                        resources:
                          items:
                            type: string
                          type: array
                      required:
                      - name
                      type: object
                    type: array
                required:
                - name
                - workloads
                type: object
              type: array
            observedDigest:
              type: string
            srcStorageClasses:
              items:
                description: StorageClass is an available storage class in the cluster Name - the storage class name Provisioner - the dynamic provisioner for the storage class Default - whether or not this storage class is the default AccessModes - access modes supported by the dynamic provisioner
                properties:
                  accessModes:
                    items:
                      type: string
                    type: array
                  default:
                    type: boolean
                  name:
                    type: string
                  provisioner:
                    type: string
                type: object
              type: array
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  labels:
    app: tanzu-migrator
  name: tm-manager-role
rules:
- apiGroups:
  - migrator.run.tanzu.vmware.com
  resources:
  - miganalytics
  - migclusters
  - mighooks
  - migmigrations
  - migplans
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - migrator.run.tanzu.vmware.com
  resources:
  - miganalytics/status
  - migclusters/status
  - mighooks/status
  - migmigrations/status
  - migplans/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - authorization.k8s.io
  resources:
  - selfsubjectaccessreviews
  verbs:
  - create
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - batch
  resources:
  - jobs/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: tanzu-migrator
  name: tm-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tm-manager-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: tanzu-migrator
---
apiVersion: v1
data:
  GIN_MODE: release
  KMOTION_IMAGE: gcr.io/cf-pks-releng-environments/tm/kmotion:0.1.0
  WORKING_DIR: /var/cache/discovery
kind: ConfigMap
metadata:
  labels:
    app: tanzu-migrator
    control-plane: controller-config
  name: tm-controller-config
  namespace: tanzu-migrator
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: tanzu-migrator
    control-plane: discovery-controller
  name: tm-discovery-service
  namespace: tanzu-migrator
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: api
  selector:
    app: tanzu-migrator
    control-plane: discovery-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: tanzu-migrator
    control-plane: discovery-controller
  name: tm-discovery-controller
  namespace: tanzu-migrator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tanzu-migrator
      control-plane: discovery-controller
  template:
    metadata:
      labels:
        app: tanzu-migrator
        control-plane: discovery-controller
    spec:
      containers:
      - command:
        - /home/tanzu-migrator/manager
        env:
        - name: ROLE
          value: discovery
        envFrom:
        - configMapRef:
            name: tm-controller-config
        image: gcr.io/cf-pks-releng-environments/tm/mig-controller:0.3.0
        name: manager
        ports:
        - containerPort: 8080
          name: api
        resources:
          limits:
            cpu: 2
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 500Mi
        volumeMounts:
        - mountPath: /var/cache/discovery
          name: discovery
      terminationGracePeriodSeconds: 10
      volumes:
      - emptyDir:
          medium: Memory
        name: discovery
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: tanzu-migrator
    control-plane: migration-controller
  name: tm-migration-controller
  namespace: tanzu-migrator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tanzu-migrator
      control-plane: migration-controller
  template:
    metadata:
      labels:
        app: tanzu-migrator
        control-plane: migration-controller
    spec:
      containers:
      - command:
        - /home/tanzu-migrator/manager
        env:
        - name: ROLE
          value: mtc
        envFrom:
        - configMapRef:
            name: tm-controller-config
        image: gcr.io/cf-pks-releng-environments/tm/mig-controller:0.3.0
        name: manager
        resources:
          limits:
            cpu: 2
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 500Mi
      terminationGracePeriodSeconds: 10
